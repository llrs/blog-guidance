[
["index.html", "A Minimal Bookdown Book Preface", " A Minimal Bookdown Book Stefanie Butland 2020-01-13 Preface This is the very first part of the book. "],
["content.html", "Chapter 1 Content Guidelines 1.1 Blog post or Tech Note? 1.2 Types of posts 1.3 What goes in your post?", " Chapter 1 Content Guidelines 1.1 Blog post or Tech Note? The rOpenSci blog features two types of posts: long form blog posts for a broad readership, and shorter notes aimed at a more technical audience. We provide details and selected examples of blog posts below. Tech Notes are written for a narrower audience that wants details. They may include information on a software release with major new features, breaking changes, or significant new documentation. They should provide something a reader could not glean from the documentation itself. Blog posts are usually published weekly on Tuesdays. Tech Notes can be published on any weekday. Both are given the same promotional treatment by rOpenSci . 1.2 Types of posts Read a few blog posts and tech notes and consider what you like (or not) about them. Most posts written by community members are about packages that have passed rOpenSci software peer review, however, we have posts on a range of topics and we encourage you to consider these or to propose others. About a peer-reviewed package developed by the authors Major updates to key packages (Re)introducing skimr v2 - A year in the life of an open source R project drake transformed (technote) drake’s improved high-performance computing power (technote) Reviewer perspectives Contributing to or taking over maintenance of a package Relaunching the qualtRics package Monkeying around with Code and Paying it Forward Summarizing a Community Call Code Review in the Lab Describing a creative use case for multiple rOpenSci packages Where to go observe birds in Radolfzell? An answer with R and open data Using an rOpenSci resource, such as the Package Development Guide or a task view When Standards Go Wild - Software Review for a Manuscript Using rOpenSci Software Peer Review Guidelines for Teaching Getting your toes wet in R: Hydrology, meteorology, and more Describe an unsolved problem and a call to action rOpenSci Educators Collaborative: What Are The Challenges When Teaching Science With R? (3 posts from unconf18) 1.3 What goes in your post? Since most posts contributed by community members are about packages that have passed software peer review, we use this type of post as an example to outline components you should consider including in your post. Some components would not be included if the post is not about a peer reviewed package. What message would you like a reader to take away? What do you feel like you can’t resist sharing with (a very small corner of) the world? Why did you create the package? Discuss the tools it builds upon or how it works under the hood. You might share your opinions, 5 tips on doing X, what was challenging and how did you meet the challenge, what got you excited or inspired you, something you learned or implemented from the software peer review process, or a compelling real-world example. Share something a reader could not glean from the package documentation itself. Use your own voice when you’re writing this. Who is your audience? You can’t write for everyone; you should have an audience in mind. Consider that readers of the rOpenSci blog have a broad range of interests, skills, and experiences. Some will have deep technical knowledge in software development. Some will be domain scientists interested in how to use the package you have developed. Some might be reading as a way to consider how they can contribute to an open source project. Write in a way that any reader can understand what your post is about, but target the majority of its content to a specific audience. Start with a short summary Assume no one knows what your package does or why they should care about it. Provide an outline so your reader knows where you’re taking them, especially if your post is long or complex. Use short headings to guide the reader. A good introduction helps potential readers know whether they want to read the rest. Give a compelling example Explain what you’re going to do in plain language Include some code and a figure or other image Before code snippets, explain what they do After a figure generated by your code, explain what conclusion can be drawn from it. Don’t leave the reader to guess your intent. Be generous with your appreciation Did others who are not authors of the post make significant contributions to the package or its inspiration? Thank reviewers using their first and last names linked to their rOpenSci author page if they have one, or to their relevant online presence (e.g. website, Twitter, GitHub) and link to the software review thread. There is no obligation to do this, but you could note something specific that you improved in your package or in your coding or documentation practice as a direct result of reviewers’ comments. Consider including a call to action Do you talk about future plans for package development? Consider opening issues to illustrate your thinking. If you’re willing to consider code or documentation contributions from others, label those issues “help wanted” (no hyphen, no emojis) and “good first issue” or “beginner” if those apply. People who want to contribute to rOpenSci can find these by searching GitHub (example: org:ropensci label:“help wanted” state:open), and we occasionally feature these in our newsletter. If you want people to tell you how they have used your package, tell them how you want them to do that. Encourage them to submit their use case to our public forum. There’s a template to help. We tweet these to help others see applications and we tag both the package author and use case submitter to give credit. For longer form use cases, they could submit a vignette to include as an article in your package documentation (example). If you want people to give you general feedback, tell them how you’d like to receive that. Conclusion or summary Will readers understand your take-home message clearly enough to tweet about your post? You might need to remind them of your main points. We love these posts about packages rmangal: Making Ecological Networks Easily Accessible talks through the scientific problem and context, shows some code examples, and talks about peer review but doesn’t make that the dominant part of the post. Forcing Yourself to Make Your Life Easier is an honest post with some reflection and an important message. Relaunching the qualtRics package has an engaging tone while being informative and providing technical details. Monkeying around with Code and Paying it Forward gives insight into how the author is thinking about workflows and contributing to rOpenSci (tech note) The av Package: Production Quality Video in R is to the point Now review the technical guidelinesfor submitting your draft post, and you’re ready to go. "],
["diving-in.html", "Chapter 2 Diving In", " Chapter 2 Diving In Now let’s talk details. "],
["technical.html", "Chapter 3 Technical Guidelines 3.1 Choose your workflow 3.2 Walkthrough with code snippets and screenshots 3.3 Style guide 3.4 Create or update your author file 3.5 Pre-submission checklists 3.6 Submit your draft post", " Chapter 3 Technical Guidelines 3.1 Choose your workflow Prepare your post in whichever way is most comfortable for you. You can write your post: - in your favorite editor in R Markdown or Markdown by starting with templates we provide - link to or expand .Rmd template here - link to or expand .md template here - or by using the roblog helper package created for this purpose. Installing roblog allows you to use RStudio addins to get templates and to run some pre-submission checks. 3.2 Walkthrough with code snippets and screenshots Adapt from current roweb2 instructions which are good. Like JOSS, code snippet in md that can be copied, followed by screenshot of preview 3.2.1 What goes in YAML include advice on tags, info on Twitter cards start with annotated screenshot of YAML from a real post (rmangal?) --- rmangal YAML here --- 3.2.2 Add an image from an image file, or created from R code in Rmd, adding alternative text for images Add image from an image file {{&lt; figure src = \"/img/blog-images/2019-06-04-post-template/name-of-image.png\" width = \"200\" alt = \"this is the alternative text\" &gt;}} Center or right-align an image class=\"center\" or class=\"pull-right\" HMMMM NEED TO PUT SCREENSHOTS HERE TO SHOW IMAGE SIZE AND ALIGNMENT ON PAGE. See https://docs.ropensci.org/roblog/articles/rmd-guidance.html for Rmd template that includes image placement examples. Every image should be accompanied by alternative text (alt=\"some text\") to make it more accessible to people with disabilities and provide a better user experience for everyone. The alternative text should convey the meaning or content that is displayed in the image. Refer to this tutorial for details on what should go in alternative text. 3.2.3 Add a tweet Use a Hugo shortcode to embed a tweet e.g. {{&lt; tweet 1138216112808529920 &gt;}} ADD SCREENSHOT of embedded tweet here 3.2.4 Add a citation To add citations, refer them in the body of your post: Citation of the primary literature[^1]. Citation of an R package[^2]. Citation of a website[^3]. And list your sources at the bottom of your post: [^1]: Sciaini, M., Fritsch, M., Scherer, C., &amp; Simpkins, C. E. (2018). NLMR and landscapetools: An integrated environment for simulating and modifying neutral landscape models in R. Methods in Ecology and Evolution, 9(11), 2240-2248. [doi:10.1111/2041-210X.13076](https://doi.org/10.1111/2041-210X.13076) [^2]: Elin Waring, Michael Quinn, Amelia McNamara, Eduardo Arino de la Rubia, Hao Zhu and Shannon Ellis (2019). skimr: Compact and Flexible Summaries of Data. R package version 2.0.2. https://CRAN.R-project.org/package=skimr [^3]: Hugo static site generator. https://gohugo.io/ Citations will appear at the bottom of your post like this: ADD SCREENSHOT HERE of display of footnotes in this post template 3.2.4.1 How to find citation text for a package or article To get the citation for an R package, run citation(\"packagename\"). To get the citation for an article, you can use the RStudio addin for rcrossref, or get the citation from a paper’s DOI by running e.g. &gt; rcrossref::cr_cn(&quot;10.1111/2041-210X.13076&quot;, format=&quot;text&quot;, style=&quot;apa&quot;) [1] &quot;Sciaini, M., Fritsch, M., Scherer, C., &amp; Simpkins, C. E. (2018). NLMRandlandscapetools: An integrated environment for simulating and modifying neutral landscape models inR. Methods in Ecology and Evolution, 9(11), 2240–2248. doi:10.1111/2041-210x.13076&quot; To get the citation for an article in Google Scholar, find the article, click the quote symbol (in search results under the article) to open the “Cite” window, and copy the APA style text. ADD THIS SCREENSHOT, annotated to point to quote symbol that opens the Cite window for the text to copy 3.3 Style guide adapted from: https://github.com/ropenscilabs/roblog/blob/master/vignettes/styleguide.Rmd For formatting of package names, functions, and code, follow the [tidyverse style guidance].(https://style.tidyverse.org/documentation.html#r-code). Use ### or #### to format headings in your post; larger sizes don’t look good. Note long headings with #### don’t wrap well. Use title case for the title of your post; use sentence case for headings inside the post. ‘rOpenSci’ not ‘ROpenSci’ When adding links to your post, use relative instead of absolute URLs e.g. /blog/ instead of https://ropensci.org/blog/. Use Hugo shortcodes (not html) to add images, tweets, gists etc. Use informative alternative text for all images(LINK to image alt text section above). 3.4 Create or update your author file Why? rOpenSci staff and community members who have authored a blog post, tech note, or presented in a Community Call have an author page on our website. Then, when a reader clicks on your by-line in your post, they can find your online home, possibly your Twitter or GitHub handle, and links to all the content you’ve authored on our site. For staff and leadership team members, editors for software peer review, or members of our Code of Conduct Committee, their rOpenSci title is also listed. The rOpenSci website has a page listing all authors. NOTE Need to adapt text below to use Rmd to read code (e.g. template file) and to suggest use of RStudio add-in or run roblog::ro_blog_post_author() as done in https://github.com/ropenscilabs/roblog/blob/master/vignettes/author-file-guidance.Rmd How? If you don’t already have an author page, create a folder calledyourfirstname-yourlastname in your local copy of roweb2/content/authors/. You can have accents, middle initials, or hyphens appear in your name if you name your firstname-lastname folder appropriately. If you’re not sure of how to do this, look at other people’s folder names for examples. In that folder, create a file called _index.md with information about your online presence. Example and Template Example author file /authors/kelly-obriant/_index.md that, when rendered, generates Kelly O’Briant’s author page: --- name: Kelly O&#39;Briant link: https://kellobri.github.io/ twitter: kellrstats github: kellobri --- ? maybe also show Maëlle Salmon example for other IDs and ë content/authors/maëlle-salmon/_index.md.? ? screenshot author page ? At minimum, provide your name and a link or your Twitter, GitHub, or GitLab username. The link field is meant for your preferred online presence URL. Add your usernames or ID’s without the “@”). Template _index.md &lt;LINK to author-file-template.md&gt; for author file. --- name: Author Name link: website URL or other online presence twitter: Twitter username github: GitHub username gitlab: GitLab username keybase: Keybase ID orcid: ORCID ID --- 3.5 Pre-submission checklists Instructions to copy the relevant checklist into a comment on your pull request See roblog “check your post” - ro_lint_md() to check and enforce use of complete alternative descriptions for image, of relative links to rOpenSci website, of Hugo shortcodes for tweets, of lower camelCase for rOpenSci name. - ro_check_urls() https://docs.ropensci.org/roblog/articles/checks-guidance.html 3.6 Submit your draft post Step by step guide: clone/fork …hugo local preview …pull request… See r-hub example PR https://github.com/r-hub/blog/pull/50 Knitting the Rmd will generate both .html and .md files. Please do not include the html in your pull request to roweb2. "]
]

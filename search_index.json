[["index.html", "rOpenSci Blog Guide for Authors and Editors Preface", " rOpenSci Blog Guide for Authors and Editors Stefanie Butland, Steffi LaZerte, Maëlle Salmon 2020-10-13 Preface The purpose of this documentation is to provide a guide for authors and editors of blog posts and tech notes for the rOpenSci website. We created it after reviewing and publishing over 100 posts by community members, in hopes of addressing many frequently asked questions, and frequently given suggestions. The volume of information may be overwhelming at first. Some of the guidance indicates things we require that you do (such as creating an author file with your metadata), while most of the guidance is information to help you (such as how to add an image to your post). What’s in the book and what’s required reading? Chapter 1 Content Guidelines coaches you in thinking through what you might say in your post. Chapter 2 Technical Guidelines is required reading for submitting a post - from drafting in an (R) Markdown template to submitting for review using GitHub pull request infrastructure. Chapter 3 Responding to Editor’s Review is required reading, briefly outlining how to find and respond to an editor’s comments in the GitHub pull request review interface. Chapter 4 Publication and Promotion provides some motivation for doing the extra work to contribute a post by outlining what rOpenSci does to promote it. Chapters 5 and 6 provide guidelines for editors reviewing, publishing and promoting posts and outine editorial governance. If you find any errors or things that need clarification, we would be grateful if you opened an issue or pull request in the repository for this book. We are thankful for the feedback and contributions from Hugo Gruson and Mark Padgham. "],["content.html", "Chapter 1 Content Guidelines 1.1 Blog post or tech note? 1.2 Themes of posts 1.3 What goes in your post?", " Chapter 1 Content Guidelines This chapter coaches you in thinking through what you might say in a post for the rOpenSci website. 1.1 Blog post or tech note? The rOpenSci blog features two types of posts: long form blog posts for a broad readership, and shorter tech notes aimed at a more technical audience. The word “post” refers generically to either type. We provide details and selected examples of blog posts and tech notes below. Tech notes are written for a narrower audience that wants details. They may include information on a software release with major new features, breaking changes, or significant new documentation. They should provide something a reader could not glean from the documentation itself. Blog posts are usually published weekly on Tuesdays. Tech notes can be published on any weekday. Both are given the same promotional treatment by rOpenSci. 1.2 Themes of posts Read a few posts and consider what you like (or not) about them. Most posts written by community members are about packages that have passed rOpenSci software peer review, however, we have posts on a range of topics and we encourage you to consider these or to propose others. Expand a topic below to see examples. About a peer-reviewed package developed by the authors rmangal: Making Ecological Networks Easily Accessible talks through the scientific problem and context, shows some code examples, and talks about peer review but doesn’t make that the dominant part of the post. Forcing Yourself to Make Your Life Easier is an honest post with some reflection and an important message. The av Package: Production Quality Video in R (tech note) is to the point. av is not a peer-reviewed package but this is a good example of a tech note. Major updates to key packages (Re)introducing skimr v2 - A year in the life of an open source R project) drake transformed (technote) drake’s improved high-performance computing power (technote) Reviewer perspectives posts tagged reviewer Contributing to or taking over maintenance of a package Relaunching the qualtRics package has an engaging tone while being informative and providing technical details. Monkeying around with Code and Paying it Forward gives insight into how the author is thinking about workflows and contributing to rOpenSci. Summarizing a Community Call Code Review in the Lab Describing a creative use case for multiple rOpenSci packages Where to go observe birds in Radolfzell? An answer with R and open data Using an rOpenSci resource, such as the Package Development Guide or a task view When Standards Go Wild - Software Review for a Manuscript Using rOpenSci Software Peer Review Guidelines for Teaching Getting your toes wet in R: Hydrology, meteorology, and more Describe an unsolved problem and a call to action rOpenSci Educators Collaborative: What Are The Challenges When Teaching Science With R? (3 posts from unconf18) 1.3 What goes in your post? Since most posts contributed by community members are about packages that have passed software peer review, we use this type of post as an example to outline components you should consider including in your post. Some components would not be included if the post is not about a peer reviewed package. 1.3.1 What message would you like a reader to take away? What do you feel like you can’t resist sharing with (a very small corner of) the world? Why did you create the package? Discuss the tools it builds upon or how it works under the hood. You might share your opinions, 5 tips on doing X, what was challenging and how did you meet the challenge, what got you excited or inspired you, something you learned or implemented from the software peer review process, or a compelling real-world example. Share something a reader could not glean from the package documentation itself. Use your own voice when you’re writing this. Our website has a professional tone but is less formal than, for example, an academic journal. 1.3.2 Who is your audience? You can’t write for everyone; you should have an audience in mind. Consider that readers of the rOpenSci blog have a broad range of interests, skills, and experiences. Some will have deep technical knowledge in software development. Some will be domain scientists interested in how to use the package you have developed. Some might be reading as a way to consider how they can contribute to an open source project. Write in a way that any reader can understand what your post is about, but target the majority of its content to a specific audience. 1.3.3 Start with a short summary Assume no one knows what your package does or why they should care about it. Provide an outline so your reader knows where you’re taking them, especially if your post is long or complex. A good introduction helps potential readers know whether they want to read the rest. Use short headings to guide the reader. 1.3.4 Give a compelling example Explain what you’re going to do in plain language Include some code and a figure or other image Before code snippets, explain what they do After a figure generated by your code, explain what conclusion can be drawn from it. Don’t leave the reader to guess your intent. 1.3.5 Be generous with your appreciation Did others who are not authors of the post make significant contributions to the package or its inspiration? Thank reviewers using their first and last names linked to their rOpenSci author page if they have one, or to their relevant online presence (e.g. website, Twitter, GitHub) and link to the software review thread. There is no obligation to do this, but you could note something specific that you improved in your package or in your coding or documentation practice as a direct result of reviewers’ comments. 1.3.6 Consider including a call to action Do you talk about future plans for package development? Consider opening issues to illustrate your thinking. If you’re willing to consider code or documentation contributions from others, label those issues “help wanted” (no hyphen, no emojis) and “good first issue” or “beginner” if those apply. People who want to contribute to rOpenSci can find these by searching GitHub (example: org:ropensci label:“help wanted” state:open), and we occasionally feature these in our newsletter. If you want people to tell you how they have used your package, tell them how you want them to do that. Encourage them to submit their use case to our public forum. There’s a template to help. We tweet these to help others see applications and we tag both the package author and use case submitter to give credit. For longer form use cases, they could submit a vignette to include as an article in your package documentation (example). If you want people to give you general feedback, tell them how you’d like to receive that. 1.3.7 Conclusion or summary Will readers understand your take-home message clearly enough to tweet about your post? You might need to remind them of your main points. Now review the Technical Guidelines for submitting your draft post, and you’re ready to go. "],["technical.html", "Chapter 2 Technical Guidelines 2.1 Fork the repo and create your post folder 2.2 Start the post from a template 2.3 Walkthrough with code snippets 2.4 Style Guide 2.5 Create or update your author file 2.6 Pre-submission checks 2.7 Submit your draft post", " Chapter 2 Technical Guidelines This chapter explains the technical details of submitting a blog post or tech note (referred to collectively as “posts”) for publication on the rOpenSci website - from drafting in an (R) Markdown template, to submitting for review using GitHub Pull Request infrastructure. We include advice on commonly used elements like adding an image, a citation, or embedding a tweet in case you need them. Briefly, the process is: Get the go-ahead and a tentative publication date from our Community Manager Stefanie Butland. Fork the repository (repo) of the rOpenSci website. Draft your post in R Markdown or Markdown and create or update your author metadata. Preview and refine your post locally. Submit via pull request and preview your post. A blog editor reviews your post. Revise your post in response to review. This chapter links to templates for posts and checklists that you can also find in the Appendix. 2.1 Fork the repo and create your post folder Fork the rOpenSci website repository and create a new branch to work on your post. For help with this aspect of git/GitHub, we recommend happygitwithr and the pull request helpers of the usethis package. 2.2 Start the post from a template If you use RStudio, refer to the instructions to create your draft with blogdown’s New Post Addin. If not, refer to the instructions to create your draft manually. 2.2.1 Get R Markdown or Markdown template with blogdown’s New Post Addin The blogdown New Post RStudio addin creates the post draft in the correct location and fills the post YAML based on metadata you’ll have entered.1 Install whoami and blogdown development version from GitHub whoami_path &lt;- try(find.package(&quot;whoami&quot;), silent = TRUE) if (is(whoami_path, &quot;try-error&quot;)) { install.packages(&quot;whoami&quot;) } remotes::install_github(&quot;rstudio/blogdown&quot;) Install Hugo if it wasn’t already installed on your machine. blogdown::install_hugo() Re-start R. For your local website copy, after creating a branch, run blogdown’s New Post addin from the RStudio addins menu or blogdown:::new_post_addin() Enter a title, no need to worry about title case at this stage. Enter your name if whoami wasn’t able to guess it. Choose the correct date. Enter a new slug if the default one is too long. Choose “blog” or “technotes” as a Subdirectory from the drop-down menu. Choose an Archetype, Rmd or md, from the drop-down menu. Also choose the correct Format: .Rmd if Rmd, Markdown (.md) if md. Never choose .RMarkdown. Ignore Categories. Select any relevant tag and/or create new ones. Click on “Done”, your post draft will have been created and opened. 2.2.2 Get R Markdown or Markdown template manually Create a folder YYYY-MM-DD-slug/ (e.g. 2020-01-20-rorcid/) under /content/blog/ or content/technotes/ for a blog post and a tech note, respectively. Your post source and its images should live in /content/blog/YYYY-MM-DD-slug/ or /content/technotes/YYYY-MM-DD-slug/.2 R Markdown template is to be saved as /content/blog/YYYY-MM-DD-slug/index.Rmd. It will need to be knit (RStudio knit button, or rmarkdown::render(&lt;path_to_file&gt;)). Add both index.Rmd and index.mdto your PR. Markdown template is to be saved as /content/blog/YYYY-MM-DD-slug/index.md. 2.3 Walkthrough with code snippets 2.3.1 What goes in YAML This is the YAML from our post template, with comments to explain some components: --- slug: &quot;post-template&quot; title: Post Title in Title Case # Delete the package_version line below if your post is not about a package package_version: 0.1.0 author: - Author Name1 - Author Name2 # Set the date below to the publication date of your post date: 2020-03-10 # Minimal tags for a post about a community-contributed package # that has passed software peer review are listed below # Consult the Technical Guidelines for information on choosing tags tags: - Software Peer Review - packages - R - community # The summary below will be used by e.g. Twitter cards description: &quot;A very short summary of your post (~ 100 characters)&quot; # If you have no preferred image for Twitter cards, # delete the twitterImg line below # - Replace &quot;blog&quot; with &quot;technotes&quot; as needed # - Note &quot;/&quot; between year/month/day twitterImg: blog/2019/06/04/post-template/name-of-image.png --- 2.3.1.1 Add subject tags Add tags to the YAML of your post to make it more findable. Browse our page that lists all tags in use and re-use an existing tag rather than creating a new one e.g. ‘packages’ exists, so use that, rather than ‘package’. For a post about your peer-reviewed package, use ‘Software Peer Review’, ‘R’, ‘community’, ‘packages’, the package name, tags that were topic labels in your package review such as ‘data-access’, and any others you see fit. 2.3.1.2 Optional Twitter cards metadata If you’re curious about the description, twitterImg YAML fields in the post metadata and how they can help draw readers to your post, refer to our explanation of Twitter cards. Delete description and twitterImg YAML fields if you don’t use them. 2.3.2 Examples Comparing the raw Markdown to the live posts in these examples might be helpful. A blog post about a package that has passed software peer review. Compare raw markdown with the live post. A tech note. Compare raw markdown with the live tech note. 2.3.3 To add an image If your blog post has any images that are not generated from R Markdown, put them in the same folder as your post source (/content/blog/YYYY-MM-DD-slug/ or /content/technotes/YYYY-MM-DD-slug/). To reference them in your post, use name-of-image.png. If your image is e.g. an hex logo, it might look better with a transparent background because the blog background is not exactly white. Every image should be accompanied by alternative text (alt=\"informative description\") to make it more accessible to people with disabilities and provide a better user experience for everyone. The alternative text should convey the meaning or content that is displayed in the image. Refer to this tutorial for details on what should go in alternative text. If you want to generate images from R Markdown use our R Markdown template and see next subsection. Insert an image {{&lt; figure src = \"image-name.png\" alt = \"informative description\" &gt;}} Control image size with width {{&lt; figure src = \"image-name.png\" width = \"400\" alt = \"informative description\"&gt;}} Control image placement with class {{&lt; figure src = \"image-name.png\" alt = \"informative description\" class = \"center\" &gt;}} pull-left - Left-align the picture and wrap text around it center - Center the picture (no text wrapping) pull-right - Right-align the picture and wrap text around it Make the image a hyperlink with link {{&lt; figure src = \"image-name.png\" alt = \"informative description\" link = \"http://hyperlink\"&gt;}} Important! In R Markdown (i.e. in *.Rmd files but NOT *.md files), these Hugo shortcodes need to be escaped: &lt;!--html_preserve--&gt; {{&lt; figure src = \"name-of-image.png\" width = \"400\" alt = \"informative description\"&gt;}} &lt;!--/html_preserve--&gt; 2.3.4 To add a figure generated with R When using our R Markdown template the knitr hook in the setup chunk actually creates the necessary Hugo shortcodes. Therefore you don’t need to worry about paths. In the chunk producing a figure, use the hugoopts chunk option to control the alternative text and other elements. hugoopts is a named list that can have all elements described in the documentation of the Hugo figure shortcode except for title. ```{r chunkname, hugoopts=list(alt=&quot;alternative text please make it informative&quot;, caption=&quot;this is what this image shows, write it here or in the paragraph after the image as you prefer&quot;, width=300)} plot(1:10) ``` This chunk above produces a figure with “alternative text please make it informative” as alternative text, “title of the image” as title, “this is what this image shows, write it here or in the paragraph after the image as you prefer” as caption, and a width of 300 pixels. 2.3.5 To add a citation To add citations, refer to them in the body of your post: Citation of the primary literature[^1]. Citation of an R package[^2]. Citation of a website[^3]. And list your sources at the bottom of your post: [^1]: Sciaini, M., Fritsch, M., Scherer, C., &amp; Simpkins, C. E. (2018). NLMR and landscapetools: An integrated environment for simulating and modifying neutral landscape models in R. Methods in Ecology and Evolution, 9(11), 2240-2248. &lt;https://doi.org/10.1111/2041-210X.13076&gt; [^2]: Elin Waring, Michael Quinn, Amelia McNamara, Eduardo Arino de la Rubia, Hao Zhu and Shannon Ellis (2019). skimr: Compact and Flexible Summaries of Data. R package version 2.0.2. https://CRAN.R-project.org/package=skimr [^3]: Hugo static site generator. https://gohugo.io/ 2.3.5.1 How to find citation text for a package or article To get the citation for an R package, run citation(\"packagename\"). To get the citation for an article, you can use the RStudio Addin for rcrossref, or get the citation from a paper’s DOI by running e.g. rcrossref::cr_cn(&quot;10.1111/2041-210X.13076&quot;, format=&quot;text&quot;, style=&quot;apa&quot;) [1] &quot;Sciaini, M., Fritsch, M., Scherer, C., &amp; Simpkins, C. E. (2018). NLMRandlandscapetools: An integrated environment for simulating and modifying neutral landscape models inR. Methods in Ecology and Evolution, 9(11), 2240–2248. doi:10.1111/2041-210x.13076&quot; To get the citation for an article in Google Scholar, find the article, click the quote symbol (in search results under the article) to open the “Cite” window, and copy the APA style text. 2.3.6 To embed a tweet Use a Hugo shortcode to embed a tweet using its ID e.g. {{&lt; tweet 1138216112808529920 &gt;}}. In R Markdown, shortcodes need to be html escaped, refer to the template for an example. 2.4 Style Guide For formatting of package names, functions, and code, follow the tidyverse style guidance. Format package names as regular text. When linking to rOpenSci packages use their docs.ropensci.org URL, e.g. https://docs.ropensci.org/drake/ Use ## and ### to format headings in your post, i.e. section titles as ## (h2) and subsections as ### (h3), #### (h4). Use title case for the title of your post; use sentence case for headings inside the post. ‘rOpenSci’ not ‘ROpenSci’ When adding links to your post, use relative instead of absolute URLs e.g. /blog/ instead of https://ropensci.org/blog/. Use Hugo shortcodes (not html) to add images, tweets, gists etc. In R Markdown wrap Hugo shortcodes between html preserve tags as shown in the template. Instead of using html widgets (DT, leaflet, etc.), include a screenshot and use the link option of the Hugo figure shortcode to direct readers to an online version of the widget. Use informative alternative text for all images. Add new line at end of each sentence (makes diffs easier to interpret and easier for editor to suggest specific changes). 2.5 Create or update your author file 2.5.1 Why? The rOpenSci website has a page listing all authors who have contributed to a blog post, tech note, or presented in a Community Call. A click on your by-line in a post takes the reader to your author page that has links to your online home, possibly your Twitter or GitHub profile(s), and a list of all the content you’ve authored on our site. For staff and leadership team members, editors for software peer review, or members of our Code of Conduct Committee, their rOpenSci title is also listed on their author page. 2.5.2 How? If you don’t already have an author page, create a folder called yourfirstname-yourlastname in your local copy of roweb3/content/author/. You can have accents, middle initials, or hyphens appear in your name if you name your folder appropriately. That can be tricky so we have examples below. In that folder, create a file called _index.md with information about your online presence. You can copy this template below (or get it via roblog after installing it via install.packages(\"roblog\", repos = \"https://dev.ropensci.org\") ). author-file-template.md --- name: Author Name link: website URL or other online presence twitter: Twitter username github: GitHub username gitlab: GitLab username keybase: Keybase ID orcid: ORCID ID --- At minimum, provide your name and a link or your Twitter, GitHub, or GitLab username. Add your usernames or ID’s without the “@” or the “https:…”. The link field can be your personal website URL, for example. 2.5.3 Examples This author file, /author/kelly-obriant/_index.md --- name: Kelly O&#39;Briant link: https://kellobri.github.io/ twitter: kellrstats github: kellobri --- … generates Kelly O’Briant’s author page This author file, /author/maëlle-salmon/_index.md --- name: Maëlle Salmon twitter: ma_salmon bio: rOpenSci Research Software Engineer, Associate editor of rOpenSci Software Peer Review github: maelle gitlab: maelle keybase: maelle_salmon orcid: 0000-0002-2815-0399 --- … generates Maëlle Salmon’s author page. For an example of how to name the folder with an accent and initials, see this author file that generates Richèl J.C. Bilderbeek’s author page. The folder name must include accents, initials with periods, and hyphens for spaces, in order to link to their blog content. Look at other people’s folder names for examples. 2.6 Pre-submission checks You can use functions in the roblog package to do some automated checks on your post. ro_lint_md() to check and enforce use of complete alternative descriptions for image, of relative links to rOpenSci website, of Hugo shortcodes for tweets, of lower camelCase for rOpenSci name ro_check_urls() to check for URLs that might be broken In the first comment of your pull request submitting a post, please copy-paste the checklist corresponding to your post (hover, a copy-paste button will appear at the top-right corner of the shaded area) and check off items. 2.6.1 Checklist for a post about a peer-reviewed package * [ ] I have read the Content Guidelines. * [ ] I have read the Technical Guidelines. * [ ] I used or followed the R Markdown or Markdown template. * [ ] I have followed the Style Guide. * [ ] I created or updated my author metadata with correct folder name. * [ ] I have added relevant tags after browsing existing tags. * [ ] I ran `roblog::ro_lint_md()` on index.md (optional). * [ ] I ran `roblog::ro_check_urls()` on index.md (optional). * [ ] I ran a spell-check on index.md. * [ ] I have added the tags - Software Peer Review, my-packagename, R. * [ ] I have added the package-version YAML tag. * [ ] I have added acknowledgement of the reviewers&#39; work. * [ ] I have added a link to the software peer review thread. * [ ] I ran a spell-check on index.md. 2.6.2 Checklist for any other post * [ ] I have read the Content Guidelines. * [ ] I have read the Technical Guidelines. * [ ] I used or followed the R Markdown or Markdown template. * [ ] I have followed the Style Guide. * [ ] I created or updated my author metadata with correct folder name. * [ ] I have added relevant tags after browsing existing tags. * [ ] I ran `roblog::ro_lint_md()` on index.md (optional). * [ ] I ran `roblog::ro_check_urls()` on index.md (optional). * [ ] I ran a spell-check on index.md. 2.7 Submit your draft post Once you’ve drafted your blog post, you can preview locally using Hugo (recommended) or skip to the next step to make a pull request and preview that. 2.7.1 Local preview with Hugo If you wish to preview your post locally, as it will appear in our site, you must install Hugo. To install, refer to Hugo docs or run blogdown::install_hugo(). Then run hugo serve in the repo directory to start a local server on http://localhost:1313. The version of Hugo used by the rOpenSci web server is defined in netlify.toml. When this preview looks good to you, you should submit your post as a pull request. 2.7.2 Make a pull request If using the R Markdown template, knitting index.Rmd (RStudio knit button, or rmarkdown::render(&lt;path_to_file&gt;)) will generate both index.md and index.html. index.html will be ignored; do commit both index.Rmd and index.md. Open a draft pull request (PR) from your fork (using the web interface, see step 8 for creating a draft), or usethis::pr_push() that will save you some work and that will in the end open the same web interface where you can choose Draft PR in the last step) Mark the draft PR as ready for review at least one week prior to the planned publication date. A review from blog editor(s) will be automatically requested by GitHub. If you opened a PR instead of a draft PR, the PR can’t go back to a draft stage but no problem, only make sure to add a comment to the PR mentioning @ropensci/blog-editors once to tell them the PR isn’t ready for review, and another comment later (again mentioning @ropensci/blog-editors) to tell them the PR is really ready for review. From the PR, Netlify will start building the new version of the site within seconds and you can preview your changes to make sure everything looks as intended. Otherwise push additional fixes till things look right. If you don’t use RStudio you can still use the addin, but the new post will be opened in the editor returned by getOption(\"editor\"), that you might need to configure.↩︎ In Hugo speak, we’d say your post is a leaf bundle.↩︎ "],["respond.html", "Chapter 3 Responding to Editor’s Review", " Chapter 3 Responding to Editor’s Review This chapter outlines how an author of a blog post or tech note can find and respond to comments from an editor in the GitHub pull request review interface. Once you have submitted your blog post or tech note, an editor will review your post providing comments on both content (is the narrative clear?) and technical (does it follow our Style Guide?) aspects. Browse Chapter 5.1 Review a post to see how editors use the GitHub web interface to suggest edits, make comments, and approve or request changes to your pull request. To respond to an editor’s review: Respond to every inline comment with a thumbs up or thumbs down emoji so the editor knows you have seen it. It’s ok to explain why you disagree with some comments. Resolve conversation for items you have addressed. Tag the editor when you have finished addressing their comments. The editor will confirm when your post is ready for publication. "],["promote.html", "Chapter 4 Publication and Promotion", " Chapter 4 Publication and Promotion This chapter provides some motivation for doing the extra work to contribute a post by outlining what rOpenSci does to promote it. We hope that by doing the extra work of publishing a blog post or tech note that you will benefit by getting more eyes on your work. Blog posts and tech notes published in 2019 on rOpenSci website got on average 426 page views in the 31 days following their publication (median of 298.5, minimum of 96, maximum of 1687). Blog posts then live a life of their own: some people will still access them, e.g. finding them via a Search Engine or rOpenSci website tag pages. When your post is published, here is what we do to promote it. Tweet from rOpenSci with a link to your post, tagging post author(s) and package reviewers with a link to the software peer review thread where relevant. rOpenSci has more than 25,000 followers on Twitter. List your post, with author names, in our biweekly newsletter. Our newsletter has more than 2,000 email subscribers and additional readers through RSS &amp; JSON feeds. List your post in our bimonthly newsletter summary “2 Months in 2 Minutes” on our blog. Our blog and tech notes are syndicated to and tweeted by R-bloggers and R Weekly. R-Bloggers cross-posts posts so it adds page views we can’t measure, whereas R Weekly drives traffic to blog posts on our website. R-Bloggers had nearly 80,000 Twitter followers in February 2020. Consult Understanding Twitter cards if you would like to learn about using the YAML metadata in your post to influence the appearance when someone shares a link to your post on Twitter, or Slack for example. You are welcome to cross-post to your own website as long as you also link to the rOpenSci website version. Example. "],["editor.html", "Chapter 5 Review, Publish, Promote 5.1 Review a post 5.2 Publish a post 5.3 Promote a post on Twitter", " Chapter 5 Review, Publish, Promote This chapter outlines the workflow for an editor to review, publish and promote a blog post or tech note. It may also provide insights for post authors. 5.1 Review a post This section explains how to review a blog post or tech note. The editor for a post is typically the Community Manager or their intern. A post is submitted as a pull request on GitHub. We use the well documented GitHub web interface to suggest edits, make comments, and ultimately merge the pull request to publish the post. There’s no better resource than that for screenshots and guidance on reviewing pull requests and for links to share with an author when coaching them on how to respond to your review. These are particularly helpful: About pull request reviews Reviewing proposed changes in a pull request Incorporating feedback in your pull request 5.1.1 Review Read the post preview to get a feel for it. On my first read, I (Stefanie) typically make a few pen &amp; paper notes for myself on what to pay attention to on deeper review. This is when I often note some positive feedback, based on a first impression. There is always something great in a post to highlight in your review. Be specific. If the post or something in it excites you, don’t hesitate to say that. How else will the author know and be inspired?! To start your review of the pull request, copy and paste either the editor checklist for a post about a peer-reviewed package, or the editor checklist for any other post, into the box that appears when you click the green Review changes button. Click on the Files changed tab in the pull request to view the .Rmd or .md file for the post. Complete the checklist and comment as needed inline in the .Rmd or .md file. You must comment in the .Rmd if one was submitted. When adding your first comment, choose Start a review (not Add a single comment), so the author gets a single notification for the review when it is complete. Where changes are “obvious” such as fixing grammar or a typo, use GitHub “commit suggestion” &lt;cmd-g&gt;/&lt;ctrl-g&gt; so the author can commit your change directly. Comment to explain the change if needed, for instance if the diff displayed by GitHub does not highlight which word(s) were edited. While our Style Guide recommends that authors add line breaks at the end of every sentence, we do not ask them to add these in their draft after the fact. To download a pull request locally so that you can experiment with it, run usethis::pr_fetch(&lt;pr_number&gt;). Even if an author gives edit permission to the repo maintainer, the editor does not usually make edits directly on the post. Rare exceptions can be made at the editor’s discretion. To ask the author to address a comment, provide a link to the appropriate section of this book to guide them. After all inline commenting and the checklist is done, add any further notes, starting with a positive comment and your overall impression, to the Review changes box. Tell the author if you have updated their author metadata (author file) e.g. by fixing the folder name, or adding a Twitter handle. This helps draw their attention to this nice feature. We don’t (yet?) have templated editor response text, but here are helpful things to include: I have made ~n (number of) comments. Look for hidden conversations when there are many comments. Ask for thumbs up or thumbs down on every editor comment so we know you have seen it. It’s ok to disagree with some comments. Resolve conversation for items you have addressed. Tag editor when you have finished addressing their comments. When your review is complete, click Comment, Approve, or Request changes, at your discretion. This will trigger a notificaton to the author. 5.1.2 Checklist for a post about a peer-reviewed package * [ ] post follows Content Guidelines * [ ] post follows Style Guide * [ ] title is in Title Case * [ ] publication date is ok * [ ] alternative text of images is informative * [ ] Twitter metadata looks ok (paste post preview link in [Twitter card validator](https://cards-dev.twitter.com/validator); might have to click twice on &quot;Preview card&quot;) * [ ] author metadata is provided with correct folder name * [ ] html not included in pull request of Rmd post * [ ] I ran `roblog::ro_lint_md()` on index.md * [ ] I ran `roblog::ro_check_urls()` on index.md * [ ] I ran a spell-check on index.md * [ ] YAML subject tags are ok * [ ] YAML package-version included * [ ] YAML subject tags - software peer review, packagename, R; add &quot;community&quot; for post by non-staff non-editor * [ ] acknowledges and links to reviewers * [ ] links to peer review thread 5.1.3 Checklist for any other post * [ ] post follows Content Guidelines * [ ] post follows Style Guide * [ ] title is in Title Case * [ ] publication date is ok * [ ] alternative text of images is informative * [ ] Twitter metadata looks ok (paste post preview link in [Twitter card validator](https://cards-dev.twitter.com/validator); might have to click twice on &quot;Preview card&quot;) * [ ] author metadata is provided with correct folder name * [ ] html not included in pull request of Rmd post * [ ] I ran `roblog::ro_lint_md()` on index.md * [ ] I ran `roblog::ro_check_urls()` on index.md * [ ] I ran a spell-check on index.md * [ ] YAML subject tags are ok 5.1.4 Check Twitter metadata The Twitter metadata in a post’s YAML helps it “look good” when an account like R Weekly Live or other readers link to the post in a tweet, separate from the tweet we send. Therefore it is important to check the Twitter metadata by pasting a post’s preview link in the Twitter card validator. You might have to click twice. See Understanding Twitter cards for details. Perfecting metadata for Twitter cards is optional for authors, so decide how critical any changes are before requesting them in your review. 5.2 Publish a post Publish a post by merging its pull request. For a post dated e.g. 2020-02-28, you can merge it any time after ~5pm Pacific on 2020-02-27 i.e. when it’s Feb 28th somewhere in the world. When possible, it’s nice to have a post published by morning in the timezone of the main post author. A “topic” linked to the blog post will automatically be created in the discussion forum blogs category for both blog posts and tech notes. This facilitates commenting on posts. Comments will appear both below the post and in the discussion forum. Note about older posts: Very old posts from (before March 2017) have no comments at all; these posts have no topicid field in their YAML header. Newer posts (March 2017 onward) have a yaml field topicid and a number in it that links to a topic that we manually created in the forum. Posts newer than March 9, 2020 won’t have a topicid field in their YAML header as a forum topic is automatically created. 5.3 Promote a post on Twitter 5.3.1 Workflow Tweet from rOpenSci. We tweet at ~8am Pacific, but it would be good to use a system for optimizing the time to send a tweet (e.g. using Buffer). Note that in Tweetdeck you can schedule an individual tweet, but you cannot schedule subsequent tweets in a thread. Therefore, it’s best to draft tweets in advance (e.g. while reviewing the post) and have a feature image(s) and alternative text for the image ready to use. Stef uses a private Google doc called “scratchpad” for this, and saves images in a local folder. 5.3.2 Content The first tweet of a thread or only tweet must include the post title, a link to the post, tag the author’s account, or their IRL name, Any tweet must provide an alternative description of any included image. A further tweet can include a link to the software peer review thread. Any tweet can include hashtags, additional account names, with the caveats of the next subsections. 5.3.3 Tagging accounts Tag the account(s) of all post authors and package authors and reviewers. If not already included in their author metadata, you can search for their account but only tag them if it is active, it is not anonymous, it is at least partly used professionally by the owner. When in doubt, use the person’s name, or time permitting, contact the person whose account you’d like to tag. For a package wrapping a service present on Twitter you can tag that account (e.g. for a tweet about rredlist that accesses IUCN Red List you might tag IUCN Twitter account). When tagging accounts include them in a sentence e.g. “Thanks to @account1”/ “As told by @account2”. We do not use tagging in tweets to ask for attention (i.e. no account names used like hashtags at the bottom of a tweet) because it could be viewed as spamming mentioned accounts, and because it creates visual clutter in the tweet. 5.3.4 Using hashtags 5.3.4.1 Selecting relevant hashtags For a tweet about a post related to a package or any R thing, use the #rstats hashtag. For a tweet about a package post, make the package name a hashtag, since rocitations Twitter account does this to announce package citations. Check the last tweets using any hashtag except the #rstats hashtag to see whether it is used as you expect. E.g. using httr wouldn’t be a good idea. It is a package name but on Twitter it is the hashtag of a team with a name controversy and even has its own emoji automatically attached to it by Twitter. 5.3.4.2 Adding hashtags Do not use too many hashtags in any tweet so as not to make the account look like a spam account / greedy for attention. Post hashtags at the bottom of each tweet, to make the rest of the content of the tweet easier to read. Capitalize letters of each word for hashtags including several words i.e. use lower or upper camelCase (e.g. #RLadies not #rladies). When posting a thread, use each hashtag only once so as not to pollute the timeline of that hashtag. 5.3.5 Using emojis In tweets, emojis are optional. When using emojis, do not use too many of them. 5.3.6 Using gifs In tweets, gifs are optional. One can include a gif that was created for the post (e.g. an animated plot). But generally not a Giphy gif since it might be interpreted differently by people who know more/less context about the gif in question (e.g. a TV show). When using a gif we should add its description by typing [Gif alt: descriptive phrase] at the bottom of the tweet. When tweeting from twitter.com, as of Feb 2020, if you have the compose image descriptions setting turned on in your accessibility settings, you can add alt descriptions for gifs as you do for images. 5.3.7 Example 2-tweet thread: [blog] “rmangal: making ecological networks easily accessible” New post by @KCazelles &amp; @SVissault in our Software Peer Review series 🔗 https://ropensci.org/blog/2019/10/21/rmangal/ 1/2 #rstats #rmangal #SoftwarePeerReview Shoutouts 🙏 in the post to reviewers Anna Willoughby &amp; @thomasp85, rmangal contributors https://docs.ropensci.org/rmangal/authors.html, &amp; all ecologists who have spent countless hours collecting data 🔎Read the rmangal open software peer review thread: https://github.com/ropensci/software-review/issues/332 2/2 "],["editormeta.html", "Chapter 6 Editorial Governance 6.1 GitHub team 6.2 Posts authored by staff", " Chapter 6 Editorial Governance This chapter explains management of the blog editors GitHub team and the process for staff-authored posts. 6.1 GitHub team rOpenSci blog editors are the member of the @ropensci/blog-editors team. The team is maintained by @stefaniebutland at the moment. Blog editors can be tagged in any ropensci repo, in particular roweb3, by writing @ropensci/blog-editors (e.g. :wave: @ropensci/blog-editors, I have trouble adding citations in my post!). Blog editors have write access to the roweb3 repo. Blog editors are “code owners” of roweb3/content/technotes, roweb3/content/blog, roweb3/content/commcalls according to roweb3’s CODEOWNERS file so any PR touching a file under these paths will automatically request their review. When one of them posts a review, it will be marked as “on behalf of @ropensci/blog-editors”. For adding a new blog editor, the team maintainer or any ropensci admin ensures the user has enabled 2FA, adds them to the team as Member (the default role). The blog editors can filter their notifications, e.g. using the reason:team-mention filter. The blog editors don’t necessarily have write access to the blog-guidance repo but are encouraged to make PRs. 6.2 Posts authored by staff Staff members can bypass review for tech notes but they can choose to request a review by blog editors. Staff members’ blog posts should be scheduled together with Stefanie Butland. Staff members are responsible for creating the discussion forum entry for their own post and must tweet from the rOpenSci Twitter account (directly or via the Tweetdeck rOpenSci team) before tweeting from their personal account. "],["templatemd.html", "A Post template in Markdown", " A Post template in Markdown Use of this template is described in Start the post from a template and Walkthrough with code snippets. Markdown template to be saved as /content/blog/YYYY-MM-DD-slug/index.md You can hover over the top-right corner of the template to make a copy-paste button appear. --- slug: &quot;post-template&quot; title: Post Title in Title Case # Delete the package_version line below if your post is not about a package package_version: 0.1.0 author: - Author Name1 - Author Name2 # Set the date below to the publication date of your post date: 2020-03-10 # Minimal tags for a post about a community-contributed package # that has passed software peer review are listed below # Consult the Technical Guidelines for information on choosing tags tags: - Software Peer Review - packages - R - community # The summary below will be used by e.g. Twitter cards description: &quot;A very short summary of your post (~ 100 characters)&quot; # If you have no preferred image for Twitter cards, # delete the twitterImg line below # - Replace &quot;blog&quot; with &quot;technotes&quot; as needed # - Note &quot;/&quot; between year/month/day twitterImg: blog/2019/06/04/post-template/name-of-image.png --- This is the Markdown (.md) template for a blog post or tech note. To generate your post with R Markdown (.Rmd), use that template instead. Throughout this template, including the YAML, you should change &quot;post-template&quot; to the slug of your post, and &quot;2019-06-04&quot; to your publication date. Save this file under /content/blog/YYYY-MM-DD-slug/index.md in the local copy of your roweb2 fork. ## Section heading in sentence case Citation of the primary literature[^1]. Citation of a website[^2]. Citation of an R package[^3]. ### Subsection heading We recommend the use of [Hugo shortcodes](https://gohugo.io/content-management/shortcodes/) to include images, tweets, videos, gists, etc. **Add an image** by using a Hugo shortcode. The image is saved under `/content/blog/YYYY-MM-DD-slug/name-of-image.png`. {{&lt; figure src = &quot;name-of-image.png&quot; width = &quot;400&quot; alt = &quot;this is the alternative text&quot; &gt;}} Consult the Technical Guidelines for tips on changing image size, alignment, and for advice on alternative text. **Embed a tweet** by using a Hugo shortcode. {{&lt; tweet 1138216112808529920 &gt;}} **Add citation or footnote** text by using the format below [^1]: Sciaini, M., Fritsch, M., Scherer, C., &amp; Simpkins, C. E. (2018). NLMR and landscapetools: An integrated environment for simulating and modifying neutral landscape models in R. Methods in Ecology and Evolution, 9(11), 2240-2248. &lt;https://doi.org/10.1111/2041-210X.13076&gt; [^2]: Elin Waring, Michael Quinn, Amelia McNamara, Eduardo Arino de la Rubia, Hao Zhu and Shannon Ellis (2019). skimr: Compact and Flexible Summaries of Data. R package version 1.0.7. https://CRAN.R-project.org/package=skimr [^3]: Hugo static site generator. https://gohugo.io/ "],["templatermd.html", "B Post template in R Markdown", " B Post template in R Markdown Use of this template is described in Start the post from a template and Walkthrough with code snippets. R Markdown template to be saved as /content/blog/YYYY-MM-DD-slug/index.Rmd Available on GitHub (not displayed for copy-paste because of “html_preserve” tags) "],["authortemplate.html", "C Author file template", " C Author file template Use of this template is described in Create or update your author file. Author file template to be saved as /content/authors/yourfirstname-yourlastname/_index.md as described in Technical Guidelines. You can hover over the top-right corner of the template to make a copy-paste button appear. --- name: Author Name link: website URL or other online presence twitter: Twitter username github: GitHub username gitlab: GitLab username keybase: Keybase ID orcid: ORCID ID --- "],["authorchecklistpeer.html", "D Author checklist for a post about a peer-reviewed package", " D Author checklist for a post about a peer-reviewed package Use of this template is described in Pre-submission checks. Copy this checklist into the first comment on your pull request. You can hover over the top-right corner of the template to make a copy-paste button appear. * [ ] I have read the Content Guidelines. * [ ] I have read the Technical Guidelines. * [ ] I used or followed the R Markdown or Markdown template. * [ ] I have followed the Style Guide. * [ ] I created or updated my author metadata with correct folder name. * [ ] I have added relevant tags after browsing existing tags. * [ ] I ran `roblog::ro_lint_md()` on index.md (optional). * [ ] I ran `roblog::ro_check_urls()` on index.md (optional). * [ ] I ran a spell-check on index.md. * [ ] I have added the tags - Software Peer Review, my-packagename, R. * [ ] I have added the package-version YAML tag. * [ ] I have added acknowledgement of the reviewers&#39; work. * [ ] I have added a link to the software peer review thread. * [ ] I ran a spell-check on index.md. "],["authorchecklistany.html", "E Author checklist for any other post", " E Author checklist for any other post Use of this template is described in Pre-submission checks. Copy this checklist into the first comment on your pull request. You can hover over the top-right corner of the template to make a copy-paste button appear. * [ ] I have read the Content Guidelines. * [ ] I have read the Technical Guidelines. * [ ] I used or followed the R Markdown or Markdown template. * [ ] I have followed the Style Guide. * [ ] I created or updated my author metadata with correct folder name. * [ ] I have added relevant tags after browsing existing tags. * [ ] I ran `roblog::ro_lint_md()` on index.md (optional). * [ ] I ran `roblog::ro_check_urls()` on index.md (optional). * [ ] I ran a spell-check on index.md. "],["editorchecklistpeer.html", "F Editor checklist for a post about a peer-reviewed package", " F Editor checklist for a post about a peer-reviewed package Use of this template is described in Review a Post. Copy this checklist to your GitHub review summary. You can hover over the top-right corner of the template to make a copy-paste button appear. * [ ] post follows Content Guidelines * [ ] post follows Style Guide * [ ] title is in Title Case * [ ] publication date is ok * [ ] alternative text of images is informative * [ ] Twitter metadata looks ok (paste post preview link in [Twitter card validator](https://cards-dev.twitter.com/validator); might have to click twice on &quot;Preview card&quot;) * [ ] author metadata is provided with correct folder name * [ ] html not included in pull request of Rmd post * [ ] I ran `roblog::ro_lint_md()` on index.md * [ ] I ran `roblog::ro_check_urls()` on index.md * [ ] I ran a spell-check on index.md * [ ] YAML subject tags are ok * [ ] YAML package-version included * [ ] YAML subject tags - software peer review, packagename, R; add &quot;community&quot; for post by non-staff non-editor * [ ] acknowledges and links to reviewers * [ ] links to peer review thread "],["editorchecklistany.html", "G Editor checklist for any other post", " G Editor checklist for any other post Use of this template is described in Review a Post. Copy this checklist to your GitHub review summary. You can hover over the top-right corner of the template to make a copy-paste button appear. * [ ] post follows Content Guidelines * [ ] post follows Style Guide * [ ] title is in Title Case * [ ] publication date is ok * [ ] alternative text of images is informative * [ ] Twitter metadata looks ok (paste post preview link in [Twitter card validator](https://cards-dev.twitter.com/validator); might have to click twice on &quot;Preview card&quot;) * [ ] author metadata is provided with correct folder name * [ ] html not included in pull request of Rmd post * [ ] I ran `roblog::ro_lint_md()` on index.md * [ ] I ran `roblog::ro_check_urls()` on index.md * [ ] I ran a spell-check on index.md * [ ] YAML subject tags are ok "],["twittercards.html", "H Understanding Twitter cards", " H Understanding Twitter cards A Twitter card means than when a URL is included in a tweet, what other Twitter users see is not the URL but instead a “card”, i.e. the metadata from the URL rendered in a nice preview. The Twitter metadata in a post’s YAML helps it “look good” when an account like R Weekly Live or other readers link to the post in a tweet. The relevant YAML tags for rOpenSci posts are title, description, twitterImg. These same metadata tags might be picked up by other platforms such as Slack. This is what a tweet about an rOpenSci post looks like by default. rOpenSci&#39;s Leadership in #rstats Culture @rOpenSci #rstats #datascience https://t.co/VWSmvstOED&mdash; R Weekly Live (@rweekly_live) February 21, 2020 If a specific description is not specified, the first sentences of the post (~100 characters) are used. If a specific twitterImg is not specified, a thumbnail of the rOpenSci logo is used. This is what a tweet about an rOpenSci post looks like with YAML twitterImg specified. Aggregating spatial data with the grainchanger package @rOpenSci #rstats #datascience https://t.co/eILe7af7o8&mdash; R Weekly Live (@rweekly_live) July 16, 2019 If you specify a twitterImg, ensure that its dimensions are appropriate. (Search for those in a search engine for current recommendation.) These may be different from the dimensions of an image featured in your post. You could save a separate copy of an image for the purpose of twitterImg only if you think it will draw people to read your post. How do you know what it will look like? You can check the Twitter metadata by pasting a post’s preview link in the Twitter card validator. You might have to click the validator twice. "]]
